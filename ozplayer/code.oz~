local
   % See project statement for API details.
   [Project] = {Link ['Project2018.ozf']}
   Time = {Link ['x-oz://boot/Time']}.1.getReferenceTime

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   % Translate a note to the extended notation.
   fun {NoteToExtended Note}
      case Note
      of note(name:n octave:o sharp:s duration:d instrument:none) then
         note(name:n octave:o sharp:s duration:d instrument:none)
      [] silence(duration:d) then
         silence(duration:d)
      [] silence then
         silence(duration:1.0)
      [] Name#Octave then
         note(name:Name octave:Octave sharp:true duration:1.0 instrument:none)
      [] Atom then
         case {AtomToString Atom}
         of [_] then
            note(name:Atom octave:4 sharp:false duration:1.0 instrument:none)
         [] [N O] then
            note(name:{StringToAtom [N]}
                 octave:{StringToInt [O]}
                 sharp:false
                 duration:1.0
                 instrument: none)
         end
      end
   end

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   fun {ChordToExtended Chord}
     case Chord
     of nil then nil
     [] H|T then
        {NoteToExtended H}|{ChordToExtended T}
     else nil
     end
   end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    fun {Duration P S}
      local
        fun {DRatio P S Acc}
          case P
          of nil then S/Acc
          [] H|T then
             {DRatio T S Acc+H.duration}
          end
        end
        Partition = {ChordToExtended P}
      in
       {Stretch Partition {DRatio X S 0} true}
      end
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   fun {Stretch Partition Facteur Extended}
     if Extended==false then
       P = {ChordToExtended P}
     else
       P = Partition
     end
     local
       fun {Stretch2 Partition Facteur}
         case Partition
         of nil then nil
         [] H|T then
            H.duration = Facteur*H.duration
            {Stretch2 T Facteur}
         end
       end
     in
       {Stretch2 P Facteur}
     end
   end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   fun {Drone NoteOrChord Amount}
     if Amount==0 then
       nil
     else
       NoteOrChord|{Drone NoteOrChord Amount-1}
     end
   end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   fun {Transpose Integer Partition}

   end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    fun {PartitionToTimedList Partition}
      case Partition
      of nil then nil
      [] H|T then
         case H
         of nil then nil
         [] H1|T1 then
            {ChordToExtended H}|{PartitionToTimedList T}
         else
            {NoteToExtended H}|{PartitionToTimedList T}
         end
      end
    end

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   fun {Mix P2T Music}
      % TODO
      {Project.readFile 'wave/animaux/cow.wav'}
   end

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   Music = {Project.load 'joy.dj.oz'}
   Start

   % Uncomment next line to insert your tests.
   % \insert 'tests.oz'
   % !!! Remove this before submitting.
in
   Start = {Time}

   % Uncomment next line to run your tests.
   % {Test Mix PartitionToTimedList}

   % Add variables to this list to avoid "local variable used only once"
   % warnings.
   {ForAll [NoteToExtended Music] Wait}

   % Calls your code, prints the result and outputs the result to `out.wav`.
   % You don't need to modify this.
   {Browse {Project.run Mix PartitionToTimedList Music 'out.wav'}}

   % Shows the total time to run your code.
   {Browse {IntToFloat {Time}-Start} / 1000.0}
end






fun {Duration P S}
  local
  fun {Durationratio P S Acc}
    case P
    of nil then S/Acc
    [] H|T then
       {Durationratio T S Acc+H.duration}
    end
  end
  in
  {Browse 1}
  end
end


[] duration(seconds:s partition:p) then
   {Duration p s}
